// Code generated by protoc-gen-go. DO NOT EDIT.
// source: timeseries.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	timeseries.proto

It has these top-level messages:
	TSResponse
	Point
	Query
	Meta
	Tag
	MetaFound
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type TSResponse struct {
	Ok bool `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
}

func (m *TSResponse) Reset()                    { *m = TSResponse{} }
func (m *TSResponse) String() string            { return proto1.CompactTextString(m) }
func (*TSResponse) ProtoMessage()               {}
func (*TSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TSResponse) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

type Point struct {
	Ksid  string  `protobuf:"bytes,1,opt,name=ksid" json:"ksid,omitempty"`
	Tsid  string  `protobuf:"bytes,2,opt,name=tsid" json:"tsid,omitempty"`
	Value float32 `protobuf:"fixed32,3,opt,name=value" json:"value,omitempty"`
	Date  int64   `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
	Empty bool    `protobuf:"varint,5,opt,name=empty" json:"empty,omitempty"`
}

func (m *Point) Reset()                    { *m = Point{} }
func (m *Point) String() string            { return proto1.CompactTextString(m) }
func (*Point) ProtoMessage()               {}
func (*Point) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Point) GetKsid() string {
	if m != nil {
		return m.Ksid
	}
	return ""
}

func (m *Point) GetTsid() string {
	if m != nil {
		return m.Tsid
	}
	return ""
}

func (m *Point) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Point) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Point) GetEmpty() bool {
	if m != nil {
		return m.Empty
	}
	return false
}

type Query struct {
	Ksid  string `protobuf:"bytes,1,opt,name=ksid" json:"ksid,omitempty"`
	Tsid  string `protobuf:"bytes,2,opt,name=tsid" json:"tsid,omitempty"`
	Start int64  `protobuf:"varint,3,opt,name=start" json:"start,omitempty"`
	End   int64  `protobuf:"varint,4,opt,name=end" json:"end,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto1.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Query) GetKsid() string {
	if m != nil {
		return m.Ksid
	}
	return ""
}

func (m *Query) GetTsid() string {
	if m != nil {
		return m.Tsid
	}
	return ""
}

func (m *Query) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Query) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

type Meta struct {
	Ksid   string `protobuf:"bytes,1,opt,name=ksid" json:"ksid,omitempty"`
	Tsid   string `protobuf:"bytes,2,opt,name=tsid" json:"tsid,omitempty"`
	Metric string `protobuf:"bytes,3,opt,name=metric" json:"metric,omitempty"`
	Tags   []*Tag `protobuf:"bytes,4,rep,name=tags" json:"tags,omitempty"`
}

func (m *Meta) Reset()                    { *m = Meta{} }
func (m *Meta) String() string            { return proto1.CompactTextString(m) }
func (*Meta) ProtoMessage()               {}
func (*Meta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Meta) GetKsid() string {
	if m != nil {
		return m.Ksid
	}
	return ""
}

func (m *Meta) GetTsid() string {
	if m != nil {
		return m.Tsid
	}
	return ""
}

func (m *Meta) GetMetric() string {
	if m != nil {
		return m.Metric
	}
	return ""
}

func (m *Meta) GetTags() []*Tag {
	if m != nil {
		return m.Tags
	}
	return nil
}

type Tag struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Tag) Reset()                    { *m = Tag{} }
func (m *Tag) String() string            { return proto1.CompactTextString(m) }
func (*Tag) ProtoMessage()               {}
func (*Tag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Tag) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Tag) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type MetaFound struct {
	Ok   bool   `protobuf:"varint,1,opt,name=ok" json:"ok,omitempty"`
	Ksts string `protobuf:"bytes,2,opt,name=ksts" json:"ksts,omitempty"`
}

func (m *MetaFound) Reset()                    { *m = MetaFound{} }
func (m *MetaFound) String() string            { return proto1.CompactTextString(m) }
func (*MetaFound) ProtoMessage()               {}
func (*MetaFound) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MetaFound) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *MetaFound) GetKsts() string {
	if m != nil {
		return m.Ksts
	}
	return ""
}

func init() {
	proto1.RegisterType((*TSResponse)(nil), "proto.TSResponse")
	proto1.RegisterType((*Point)(nil), "proto.Point")
	proto1.RegisterType((*Query)(nil), "proto.Query")
	proto1.RegisterType((*Meta)(nil), "proto.Meta")
	proto1.RegisterType((*Tag)(nil), "proto.Tag")
	proto1.RegisterType((*MetaFound)(nil), "proto.MetaFound")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Timeseries service

type TimeseriesClient interface {
	Write(ctx context.Context, opts ...grpc.CallOption) (Timeseries_WriteClient, error)
	Read(ctx context.Context, in *Query, opts ...grpc.CallOption) (Timeseries_ReadClient, error)
	GetMeta(ctx context.Context, opts ...grpc.CallOption) (Timeseries_GetMetaClient, error)
}

type timeseriesClient struct {
	cc *grpc.ClientConn
}

func NewTimeseriesClient(cc *grpc.ClientConn) TimeseriesClient {
	return &timeseriesClient{cc}
}

func (c *timeseriesClient) Write(ctx context.Context, opts ...grpc.CallOption) (Timeseries_WriteClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Timeseries_serviceDesc.Streams[0], c.cc, "/proto.Timeseries/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeseriesWriteClient{stream}
	return x, nil
}

type Timeseries_WriteClient interface {
	Send(*Point) error
	CloseAndRecv() (*TSResponse, error)
	grpc.ClientStream
}

type timeseriesWriteClient struct {
	grpc.ClientStream
}

func (x *timeseriesWriteClient) Send(m *Point) error {
	return x.ClientStream.SendMsg(m)
}

func (x *timeseriesWriteClient) CloseAndRecv() (*TSResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TSResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *timeseriesClient) Read(ctx context.Context, in *Query, opts ...grpc.CallOption) (Timeseries_ReadClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Timeseries_serviceDesc.Streams[1], c.cc, "/proto.Timeseries/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeseriesReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Timeseries_ReadClient interface {
	Recv() (*Point, error)
	grpc.ClientStream
}

type timeseriesReadClient struct {
	grpc.ClientStream
}

func (x *timeseriesReadClient) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *timeseriesClient) GetMeta(ctx context.Context, opts ...grpc.CallOption) (Timeseries_GetMetaClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Timeseries_serviceDesc.Streams[2], c.cc, "/proto.Timeseries/GetMeta", opts...)
	if err != nil {
		return nil, err
	}
	x := &timeseriesGetMetaClient{stream}
	return x, nil
}

type Timeseries_GetMetaClient interface {
	Send(*Meta) error
	Recv() (*MetaFound, error)
	grpc.ClientStream
}

type timeseriesGetMetaClient struct {
	grpc.ClientStream
}

func (x *timeseriesGetMetaClient) Send(m *Meta) error {
	return x.ClientStream.SendMsg(m)
}

func (x *timeseriesGetMetaClient) Recv() (*MetaFound, error) {
	m := new(MetaFound)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Timeseries service

type TimeseriesServer interface {
	Write(Timeseries_WriteServer) error
	Read(*Query, Timeseries_ReadServer) error
	GetMeta(Timeseries_GetMetaServer) error
}

func RegisterTimeseriesServer(s *grpc.Server, srv TimeseriesServer) {
	s.RegisterService(&_Timeseries_serviceDesc, srv)
}

func _Timeseries_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TimeseriesServer).Write(&timeseriesWriteServer{stream})
}

type Timeseries_WriteServer interface {
	SendAndClose(*TSResponse) error
	Recv() (*Point, error)
	grpc.ServerStream
}

type timeseriesWriteServer struct {
	grpc.ServerStream
}

func (x *timeseriesWriteServer) SendAndClose(m *TSResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *timeseriesWriteServer) Recv() (*Point, error) {
	m := new(Point)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Timeseries_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeseriesServer).Read(m, &timeseriesReadServer{stream})
}

type Timeseries_ReadServer interface {
	Send(*Point) error
	grpc.ServerStream
}

type timeseriesReadServer struct {
	grpc.ServerStream
}

func (x *timeseriesReadServer) Send(m *Point) error {
	return x.ServerStream.SendMsg(m)
}

func _Timeseries_GetMeta_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TimeseriesServer).GetMeta(&timeseriesGetMetaServer{stream})
}

type Timeseries_GetMetaServer interface {
	Send(*MetaFound) error
	Recv() (*Meta, error)
	grpc.ServerStream
}

type timeseriesGetMetaServer struct {
	grpc.ServerStream
}

func (x *timeseriesGetMetaServer) Send(m *MetaFound) error {
	return x.ServerStream.SendMsg(m)
}

func (x *timeseriesGetMetaServer) Recv() (*Meta, error) {
	m := new(Meta)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Timeseries_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Timeseries",
	HandlerType: (*TimeseriesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Write",
			Handler:       _Timeseries_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _Timeseries_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetMeta",
			Handler:       _Timeseries_GetMeta_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "timeseries.proto",
}

func init() { proto1.RegisterFile("timeseries.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 336 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x5d, 0x4b, 0xeb, 0x40,
	0x10, 0xed, 0xe6, 0xa3, 0xf7, 0x76, 0x7a, 0xb9, 0xf4, 0x2e, 0x17, 0x09, 0x45, 0x24, 0xec, 0x83,
	0xe4, 0x41, 0x6b, 0xa9, 0xff, 0x41, 0x9f, 0x04, 0x5d, 0x03, 0x7d, 0x5e, 0xcd, 0x58, 0x42, 0x6c,
	0xb6, 0x64, 0xa7, 0x42, 0xff, 0x86, 0xbf, 0x58, 0x76, 0x36, 0xad, 0x1f, 0x4f, 0xfa, 0x94, 0x73,
	0xce, 0x4e, 0xe6, 0x1c, 0xce, 0xc0, 0x84, 0xea, 0x35, 0x3a, 0xec, 0x6a, 0x74, 0xb3, 0x4d, 0x67,
	0xc9, 0xca, 0x94, 0x3f, 0xea, 0x18, 0xa0, 0xbc, 0xd7, 0xe8, 0x36, 0xb6, 0x75, 0x28, 0xff, 0x42,
	0x64, 0x9b, 0x4c, 0xe4, 0xa2, 0xf8, 0xad, 0x23, 0xdb, 0x28, 0x0b, 0xe9, 0xad, 0xad, 0x5b, 0x92,
	0x12, 0x92, 0xc6, 0xd5, 0x15, 0x3f, 0x8d, 0x34, 0x63, 0xaf, 0x91, 0xd7, 0xa2, 0xa0, 0x79, 0x2c,
	0xff, 0x43, 0xfa, 0x62, 0x9e, 0xb7, 0x98, 0xc5, 0xb9, 0x28, 0x22, 0x1d, 0x88, 0x9f, 0xac, 0x0c,
	0x61, 0x96, 0xe4, 0xa2, 0x88, 0x35, 0x63, 0x3f, 0x89, 0xeb, 0x0d, 0xed, 0xb2, 0x94, 0xdd, 0x02,
	0x51, 0x4b, 0x48, 0xef, 0xb6, 0xd8, 0xed, 0x7e, 0x62, 0xe8, 0xc8, 0x74, 0xc4, 0x86, 0xb1, 0x0e,
	0x44, 0x4e, 0x20, 0xc6, 0xb6, 0xea, 0xfd, 0x3c, 0x54, 0x4f, 0x90, 0xdc, 0x20, 0x99, 0x6f, 0xef,
	0x3d, 0x82, 0xe1, 0x1a, 0xa9, 0xab, 0x1f, 0x79, 0xf1, 0x48, 0xf7, 0x4c, 0x9e, 0x40, 0x42, 0x66,
	0xe5, 0xb2, 0x24, 0x8f, 0x8b, 0xf1, 0x02, 0x42, 0x99, 0xb3, 0xd2, 0xac, 0x34, 0xeb, 0xea, 0x1c,
	0xe2, 0xd2, 0xac, 0x7c, 0x80, 0x06, 0x77, 0xbd, 0x8b, 0x87, 0xef, 0xcd, 0x04, 0x97, 0x40, 0xd4,
	0x05, 0x8c, 0x7c, 0xac, 0x2b, 0xbb, 0x6d, 0xab, 0xaf, 0xed, 0x87, 0xac, 0xe4, 0xf6, 0xb9, 0x3c,
	0x5e, 0xbc, 0x0a, 0x80, 0xf2, 0x70, 0x4b, 0x79, 0x06, 0xe9, 0xb2, 0xab, 0x09, 0xe5, 0x9f, 0x3e,
	0x09, 0x9f, 0x6b, 0xfa, 0x6f, 0x9f, 0xeb, 0x70, 0x5a, 0x35, 0x28, 0x84, 0x3c, 0x85, 0x44, 0xa3,
	0xa9, 0x0e, 0xc3, 0x5c, 0xf5, 0xf4, 0xd3, 0xaf, 0x6a, 0x30, 0x17, 0x72, 0x06, 0xbf, 0xae, 0x91,
	0xb8, 0xaf, 0x71, 0xff, 0xe8, 0xc9, 0x74, 0xf2, 0x81, 0x70, 0x64, 0xbf, 0x75, 0x2e, 0x1e, 0x86,
	0x2c, 0x5f, 0xbe, 0x05, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xb1, 0x1f, 0x37, 0x66, 0x02, 0x00, 0x00,
}
